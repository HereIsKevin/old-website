---
import { getEntry } from "astro:content"

import "@fontsource/jetbrains-mono/latin-400.css"
import "@fontsource/jetbrains-mono/latin-700.css"

import HeroPage from "../layouts/HeroPage.astro"

const entry = await getEntry("egg", "game")
const data = entry.data
---

<HeroPage title="Easter Egg | Kevin" image='url("/voronoi.svg")'>
  <Fragment slot="hero">
    <div id="game" hidden>
      <div id="output"></div>
      <div id="prompt">
        <button id="submit">&gt;</button>
        <input
          id="input"
          type="text"
          placeholder="What do you want to do?"
          aria-label="Prompt for action"
        />
      </div>
      <template id="template">
        <div class="display">
          <h2 class="heading"></h2>
          <p class="message"></p>
        </div>
      </template>
    </div>
    <div id="message">
      <h1 class="title">ðŸ¥š Not Found</h1>
      <p class="description">
        Nothing interesting here, at least for now. Also, be sure to check out
        the 404 Not Found page, it's awesome.
      </p>
    </div>
  </Fragment>
</HeroPage>

<style>
  #game {
    --nav: 60px;
    --margin: 25px;
    --padding: 20px;

    --radius: 5px;
    --width: 1px;

    /* navigation + top and bottom margins */
    --offset: calc(var(--nav) + 2 * var(--margin));

    display: flex;
    flex-direction: column;
    margin-top: var(--nav);
    width: 100%;
    height: calc(100dvh - var(--offset));

    font-family: var(--font-monospace);
    color: var(--color-white);
    background-color: var(--color-primary-transparent);
    backdrop-filter: blur(3px);
    border-width: var(--width);
    border-style: solid;
    border-color: var(--color-white);
    border-radius: var(--radius);
  }

  #output {
    flex-grow: 1;
    overflow: scroll;
    padding: 20px;

    border-bottom-width: var(--width);
    border-bottom-style: solid;
    border-bottom-color: var(--color-white);
  }

  .display:not(:last-child) {
    padding-bottom: 20px;
    margin-bottom: 20px;
    border-bottom-width: var(--width);
    border-bottom-style: solid;
    border-bottom-color: var(--color-white);
  }

  .heading {
    margin: 0;
    margin-bottom: 5px;
  }

  .message {
    margin: 0;
  }

  #prompt {
    display: flex;
    margin: 0;
  }

  #submit {
    margin: 0;
    padding-left: 15px;
    padding-right: 15px;
    padding-top: 10px;
    padding-bottom: 10px;

    font-family: var(--font-monospace);
    font-size: 1rem;
    color: var(--color-white);
    background-color: transparent;
    border-style: none;
    border-bottom-left-radius: var(--radius);
    border-right-width: var(--width);
    border-right-style: solid;
    border-right-color: var(--color-white);
  }

  #input {
    flex-grow: 1;
    margin: 0;
    padding: 10px;

    font-family: var(--font-monospace);
    font-size: 1rem;
    color: var(--color-white);
    background-color: transparent;
    border-style: none;
    outline-style: none;
  }

  #input::placeholder {
    color: var(--color-white);
  }

  .title {
    margin: 0;
    margin-top: 60px;
    font-size: var(--size-large);
  }

  .description {
    margin: 0;
    margin-bottom: 15lvh;
    font-size: var(--size-medium);
    line-height: calc(var(--size-medium) * 1.5);
  }

  [hidden] {
    display: none !important;
  }
</style>

<script define:vars={{ data }}>
  window.data = data
</script>

<script>
  import type { CollectionEntry } from "astro:content"

  type Data = CollectionEntry<"egg">["data"]

  declare global {
    var data: Data
  }

  let query: ((action: string) => void) | undefined

  const output = document.getElementById("output")!
  const prompt = document.getElementById("prompt")!
  const submit = document.getElementById("submit") as HTMLButtonElement
  const input = document.getElementById("input") as HTMLInputElement
  const template = document.getElementById("template") as HTMLTemplateElement

  submit.addEventListener("click", () => {
    if (query === undefined) {
      return
    }

    const value = input.value.trim().toLowerCase()
    input.value = ""
    query(value)
  })

  prompt.addEventListener("keypress", (event) => {
    if (query === undefined || event.key !== "Enter") {
      return
    }

    const value = input.value.trim().toLowerCase()
    input.value = ""
    query(value)
  })

  function sleep(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms))
  }

  function scroll(): void {
    output.scroll({ top: output.scrollHeight })
  }

  function error(): void {
    const fragment = template.content.cloneNode(true) as DocumentFragment
    const displayElement = fragment.firstElementChild!
    const headingElement = displayElement.firstElementChild!
    const messageElement = displayElement.lastElementChild!

    headingElement.remove()
    messageElement.textContent = "Please try again..."
    output.append(displayElement)
    scroll()
  }

  function end(): void {
    const fragment = template.content.cloneNode(true) as DocumentFragment
    const displayElement = fragment.firstElementChild!
    const headingElement = displayElement.firstElementChild!
    const messageElement = displayElement.lastElementChild!

    headingElement.textContent = "The End"
    messageElement.textContent = "Reload the page to play again."
    output.append(displayElement)
    scroll()

    input.disabled = true
    submit.disabled = true
  }

  async function display(heading: string, message: string): Promise<void> {
    input.disabled = true
    submit.disabled = true

    const fragment = template.content.cloneNode(true) as DocumentFragment
    const displayElement = fragment.firstElementChild!
    const headingElement = displayElement.firstElementChild!
    const messageElement = displayElement.lastElementChild!

    headingElement.textContent = heading
    output.append(displayElement)
    scroll()

    for (const character of message) {
      messageElement.textContent += character
      scroll()
      await sleep(10)
    }

    input.disabled = false
    submit.disabled = false

    input.focus()
  }

  class Room {
    #game: Game
    #heading: string
    #message: string
    #actionOrActions: string | Record<string, string>

    constructor(
      game: Game,
      heading: string,
      message: string,
      actionOrActions: string | Record<string, string>
    ) {
      this.#game = game
      this.#heading = heading
      this.#message = message
      this.#actionOrActions = actionOrActions
    }

    #query = (action: string): void => {
      if (typeof this.#actionOrActions === "string") {
        throw Error("Missing 'actions' for querying")
      }

      const room = this.#actionOrActions[action]

      if (room === undefined) {
        error()
        return
      }

      this.#game.move(room)
    }

    async run(): Promise<void> {
      await display(this.#heading, this.#message)

      if (typeof this.#actionOrActions === "string") {
        this.#game.move(this.#actionOrActions)
      } else {
        query = this.#query
      }
    }
  }

  class Game {
    #room: string
    #rooms: Record<string, Room> = {}

    constructor(data: Data) {
      this.#room = data.config.room

      for (const [name, room] of Object.entries(data.rooms)) {
        const { heading, message, action, actions } = room

        if (action !== undefined && actions === undefined) {
          this.#rooms[name] = new Room(this, heading, message, action)
        } else if (action === undefined && actions !== undefined) {
          this.#rooms[name] = new Room(this, heading, message, actions)
        } else {
          throw new Error("One of 'action' or 'actions' must exist.")
        }
      }
    }

    move(room: string): void {
      if (room === "end") {
        end()
        return
      }

      const currentRoom = this.#rooms[room]

      if (currentRoom === undefined) {
        throw new Error(`Room '${room}' does not exist.`)
      }

      currentRoom.run()
      this.#room = room
    }

    run(): void {
      this.move(this.#room)
    }
  }

  const game = document.getElementById("game")!
  const message = document.getElementById("message")!

  if (window.localStorage.getItem("egg") === "enabled") {
    game.hidden = false
    message.hidden = true

    new Game(window.data).run()
  }
</script>
